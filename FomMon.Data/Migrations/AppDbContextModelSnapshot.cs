// <auto-generated />
using System;
using System.Text.Json;
using FomMon.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FomMon.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "citext");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FomMon.Data.Models.AreaAlert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("AreaWatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("area_watch_id");

                    b.Property<int>("FeatureId")
                        .HasColumnType("integer")
                        .HasColumnName("feature_id");

                    b.Property<string>("LayerKind")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("layer_kind");

                    b.Property<Instant>("TriggeredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("triggered_at");

                    b.HasKey("Id")
                        .HasName("pk_area_watch_alerts");

                    b.HasIndex("AreaWatchId")
                        .HasDatabaseName("ix_area_watch_alerts_area_watch_id");

                    b.HasIndex("FeatureId")
                        .HasDatabaseName("ix_area_watch_alerts_feature_id");

                    b.ToTable("area_watch_alerts", (string)null);
                });

            modelBuilder.Entity("FomMon.Data.Models.AreaWatch", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Instant>("AddedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_date");

                    b.Property<Instant>("EvaluatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("evaluated_date");

                    b.Property<Geometry>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("geometry");

                    b.PrimitiveCollection<string[]>("Layers")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("layers");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_area_watches");

                    b.HasIndex("Geometry")
                        .HasDatabaseName("ix_area_watches_geometry");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Geometry"), "GIST");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_area_watches_user_id");

                    b.ToTable("area_watches", (string)null);
                });

            modelBuilder.Entity("FomMon.Data.Models.FeatureReference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<JsonDocument>("AttributesSnapshot")
                        .HasColumnType("jsonb")
                        .HasColumnName("attributes_snapshot");

                    b.Property<Instant?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Instant>("FirstSeenAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_seen_at");

                    b.Property<Geometry>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("geometry");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<Instant>("LastSeenAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_seen_at");

                    b.Property<string>("LayerKind")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("layer_kind");

                    b.Property<string>("SourceFeatureId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("source_feature_id");

                    b.HasKey("Id")
                        .HasName("pk_feature_references");

                    b.HasIndex("Geometry")
                        .HasDatabaseName("ix_feature_references_geometry");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Geometry"), "GIST");

                    b.HasIndex("LayerKind", "SourceFeatureId")
                        .IsUnique()
                        .HasDatabaseName("ix_feature_references_layer_kind_source_feature_id");

                    b.ToTable("feature_references", (string)null);
                });

            modelBuilder.Entity("FomMon.Data.Models.LayerType", b =>
                {
                    b.Property<string>("Kind")
                        .HasColumnType("text")
                        .HasColumnName("kind");

                    b.Property<long?>("FeatureCount")
                        .HasColumnType("bigint")
                        .HasColumnName("feature_count");

                    b.Property<Instant?>("LastDownloaded")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_downloaded");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Kind")
                        .HasName("pk_layer_types");

                    b.ToTable("layer_types", "layers");

                    b.HasData(
                        new
                        {
                            Kind = "FomCutblock",
                            Version = 0u
                        },
                        new
                        {
                            Kind = "FomRoad",
                            Version = 0u
                        },
                        new
                        {
                            Kind = "FomRetention",
                            Version = 0u
                        });
                });

            modelBuilder.Entity("FomMon.Data.Models.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Instant?>("Closed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closed");

                    b.Property<Instant>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<Instant?>("FeaturesRefreshed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("features_refreshed");

                    b.Property<Point>("Geometry")
                        .IsRequired()
                        .HasColumnType("geometry")
                        .HasColumnName("geometry");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("state");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.ToTable("projects", (string)null);
                });

            modelBuilder.Entity("FomMon.Data.Models.PublicNotice", b =>
                {
                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("project_id");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("company_id");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("company_name");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("description");

                    b.Property<int>("OperationEndYear")
                        .HasColumnType("integer")
                        .HasColumnName("operation_end_year");

                    b.Property<int>("OperationStartYear")
                        .HasColumnType("integer")
                        .HasColumnName("operation_start_year");

                    b.Property<LocalDate>("PostDate")
                        .HasColumnType("date")
                        .HasColumnName("post_date");

                    b.Property<Instant>("Refreshed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refreshed");

                    b.HasKey("ProjectId")
                        .HasName("pk_public_notices");

                    b.ToTable("public_notices", (string)null);
                });

            modelBuilder.Entity("FomMon.Data.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("citext")
                        .HasColumnName("email");

                    b.Property<string>("Issuer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("issuer");

                    b.Property<string>("ProfileImageObjectName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("profile_image_object_name");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("subject");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("Issuer", "Subject")
                        .IsUnique()
                        .HasDatabaseName("ix_users_issuer_subject");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("FomMon.Data.Models.AreaAlert", b =>
                {
                    b.HasOne("FomMon.Data.Models.AreaWatch", "AreaWatch")
                        .WithMany("Alerts")
                        .HasForeignKey("AreaWatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_area_watch_alerts_area_watches_area_watch_id");

                    b.HasOne("FomMon.Data.Models.FeatureReference", "FeatureReference")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_area_watch_alerts_feature_references_feature_id");

                    b.Navigation("AreaWatch");

                    b.Navigation("FeatureReference");
                });

            modelBuilder.Entity("FomMon.Data.Models.AreaWatch", b =>
                {
                    b.HasOne("FomMon.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_area_watches_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FomMon.Data.Models.PublicNotice", b =>
                {
                    b.HasOne("FomMon.Data.Models.Project", "Project")
                        .WithOne("PublicNotice")
                        .HasForeignKey("FomMon.Data.Models.PublicNotice", "ProjectId")
                        .HasConstraintName("fk_public_notices_projects_project_id");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("FomMon.Data.Models.AreaWatch", b =>
                {
                    b.Navigation("Alerts");
                });

            modelBuilder.Entity("FomMon.Data.Models.Project", b =>
                {
                    b.Navigation("PublicNotice");
                });
#pragma warning restore 612, 618
        }
    }
}
